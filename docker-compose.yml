
# docker-compose.yml (fixed for Apple Silicon)
x-common: &trainer
  build: 
    context: .
    platform: linux/amd64  # Force consistent architecture
  image: dino-rl:latest
  working_dir: /app
  environment:
    - DISPLAY=:99
    - PYTHONPATH=/app
  volumes:
    - ./logs:/app/logs
    - ./results:/app/results
    - ./configs:/app/configs
  networks:
    - dino-net

networks:
  dino-net:

services:
  # PPO baseline
  ppo_baseline:
    <<: *trainer
    command: >
      python -m scripts.train_ppo
      --config configs/ppo_baseline.yaml
      --seeds 0
      --total_timesteps 10000
      --set env.input_backend=xdotool env.auto_calibrate=true env.termination_method=pixeldiff
    profiles: ["ppo", "all"]

  # PPO: temporal stack 4
  ppo_stack4:
    <<: *trainer
    command: >
      python -m scripts.train_ppo
      --config configs/ppo_baseline.yaml
      --seeds 0
      --total_timesteps 10000
      --set env.temporal_stack=4 env.blur=false env.hist_eq=false env.auto_calibrate=true
    profiles: ["ablations", "all"]

  # PPO: frame skip 4  
  ppo_fs4:
    <<: *trainer
    command: >
      python -m scripts.train_ppo
      --config configs/ppo_baseline.yaml
      --seeds 0
      --total_timesteps 10000
      --set env.frame_skip=4 env.blur=false env.hist_eq=false env.auto_calibrate=true
    profiles: ["ablations", "all"]

  # PPO: domain randomization
  ppo_domain_rand:
    <<: *trainer
    command: >
      python -m scripts.train_ppo
      --config configs/ppo_baseline.yaml
      --seeds 0
      --total_timesteps 10000
      --set env.brightness_var=0.10 env.contrast_var=0.10 env.noise_level=0.02 env.auto_calibrate=true
    profiles: ["ablations", "all"]

  # Test service (minimal)
  test:
    <<: *trainer
    command: >
      python -c "
      print('Testing Docker environment...');
      from utils.input_backends import KeySender;
      key_sender = KeySender();
      print('Input backend working!');
      from envs.chrome_dino_env import ChromeDinoEnv;
      print('Environment import working!');
      print('All tests passed!')
      "
    profiles: ["test"]

  # Interactive debugging
  debug:
    <<: *trainer
    command: bash
    stdin_open: true
    tty: true
    profiles: ["debug"]